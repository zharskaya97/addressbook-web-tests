package ru.stqa.pft.addressbook.tests;// Generated by Selenium IDE

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import ru.stqa.pft.addressbook.model.ContactData;
import ru.stqa.pft.addressbook.model.Contacts;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;

public class ContactCreateTest extends TestBase {

    @DataProvider
    public Iterator<Object[]> validContactsFromJson() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader("src/test/resources/contacts.json"));
        String json = "";
        String line = reader.readLine();
        while (line != null) {
            json += line;
            line = reader.readLine();
        }
        Gson gson = new Gson();
        List<ContactData> contacts = gson.fromJson(json, new TypeToken<List<ContactData>>() {}.getType());//List<ContactData>.class
        return contacts.stream().map((g) -> new Object[]{g}).collect(Collectors.toList()).iterator();
    }

    @Test(dataProvider = "validContactsFromJson")
    public void testCreateContact(ContactData contact) {
        app.goTo().homePage();
        Contacts before = app.contact().allContact();
        app.contact().create(contact);
        assertThat(app.contact().countC(), equalTo(before.size() + 1));
        Contacts after = app.contact().allContact();
        assertThat(after, equalTo(
                before.withAdded(contact.withId(after.stream().mapToInt((g) -> g.getId()).max().getAsInt()))));
    }

    @Test(enabled = false)
    public void testCreateContact_withPhoto() {
        app.goTo().homePage();
        app.contact().initContactCreation();
        File photo = new File("src/test/resources/UnnPfCYmlns.jpg");
        app.contact().fillContactForm(
                new ContactData().withFirstname("test133").withLastname("test233").withGroup("group1").withPhoto(photo), true);
        app.contact().submitContactCreation();
        app.contact().returnToHomePage();
    }

    @Test(enabled = false)
    public void testBadCreateContact() {
        app.goTo().homePage();
        Contacts before = app.contact().allContact();
        File photo = new File("src/test/resources/UnnPfCYmlns.jpg");
        ContactData contact = new ContactData().withFirstname("test1'").withLastname("test2").withPhoto(photo);
        app.contact().create(contact);
        assertThat(app.contact().countC(), equalTo(before.size()));
        Contacts after = app.contact().allContact();
        assertThat(after, equalTo(before));
    }
}
